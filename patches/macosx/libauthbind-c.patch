--- libauthbind.c.orig	2011-12-22 10:58:56.000000000 -0800
+++ libauthbind.c	2011-12-22 10:58:55.000000000 -0800
@@ -38,35 +38,49 @@
 typedef void anyfn_type(void);
 typedef int bindfn_type(int fd, const struct sockaddr *addr, socklen_t addrlen);
 
-#define STDERRSTR_CONST(m) write(2,m,sizeof(m)-1)
-#define STDERRSTR_STRING(m) write(2,m,strlen(m))
+#define STDERRSTR_CONST(m) write(2, m, sizeof(m)-1)
+#define STDERRSTR_STRING(m) write(2, m, strlen(m))
 
 static anyfn_type *find_any(const char *name) {
   static const char *dlerr;
   anyfn_type *kv;
 
-  kv= dlsym(RTLD_NEXT,name); if (kv) return kv;
-  dlerr= dlerror(); if (!dlerr) dlerr= "dlsym() failed for no reason";
+  kv = dlsym(RTLD_NEXT, name);
+  if (kv != NULL) {
+    return kv;
+  }
+
+  dlerr = dlerror();
+  if (dlerr == NULL) {
+    dlerr = "dlsym() failed for no reason";
+  }
+
   STDERRSTR_CONST("libauthbind: error finding original version of ");
   STDERRSTR_STRING(name);
   STDERRSTR_CONST(": ");
   STDERRSTR_STRING(dlerr);
   STDERRSTR_STRING("\n");
-  errno= ENOSYS;
+  errno = ENOSYS;
   return 0;
 }
 
-static bindfn_type find_bind, *old_bind= find_bind;
+static bindfn_type find_bind, *old_bind = find_bind;
 
 int find_bind(int fd, const struct sockaddr *addr, socklen_t addrlen) {
   anyfn_type *anyfn;
-  anyfn= find_any("bind"); if (!anyfn) return -1;
-  old_bind= (bindfn_type*)anyfn;
-  return old_bind(fd,addr,addrlen);
+
+  anyfn = find_any("bind");
+  if (anyfn == NULL) {
+    errno = ENOENT;
+    return -1;
+  }
+
+  old_bind = (bindfn_type *) anyfn;
+  return old_bind(fd, addr, addrlen);
 }
 
-static int exiterrno(int e) {
-  _exit(e>0 && e<128 ? e : -1);
+static int exiterrno(int xerrno) {
+  _exit(xerrno > 0 && xerrno < 128 ? xerrno : -1);
 }
 
 static void removepreload(void) {
@@ -74,23 +88,38 @@
   char *newval, *preload;
   int lpreload, lmyself, before, after;
 
-  preload= getenv(PRELOAD_VAR);
-  myself= getenv(AUTHBINDLIB_VAR);
-  if (!myself || !preload) return;
-
-  lpreload= strlen(preload);
-  lmyself= strlen(myself);
-
-  if (lmyself < 1 || lpreload<lmyself) return;
-  if (lpreload==lmyself) {
-    if (!strcmp(preload,myself)) unsetenv(PRELOAD_VAR);
+  preload = getenv(PRELOAD_VAR);
+  myself = getenv(AUTHBINDLIB_VAR);
+  if (myself == NULL ||
+      preload == NULL) {
+    /* Nothing to do. */
+    return;
+  }
+
+  lpreload = strlen(preload);
+  lmyself = strlen(myself);
+
+  if (lmyself < 1 ||
+      lpreload < lmyself) {
+    /* Bad environment values; nothing to do */
     return;
   }
+
+  if (lpreload == lmyself) {
+    if (strcmp(preload, myself) == 0) {
+      unsetenv(PRELOAD_VAR);
+    }
+
+    return;
+  }
+
   if (!memcmp(preload,myself,lmyself) && preload[lmyself]==':') {
     before= 0; after= lpreload-(lmyself+1);
+
   } else if (!memcmp(preload+lpreload-lmyself,myself,lmyself) &&
 	     preload[lpreload-(lmyself+1)]==':') {
     before= lpreload-(lmyself+1); after= 0;
+
   } else {
     if (lpreload<lmyself+2) return;
     found= preload+1;
@@ -151,40 +180,63 @@
   const int *evilsignal;
   sigset_t block, saved;
 
-  if (addr->sa_family != AF_INET || addrlen != sizeof(struct sockaddr_in) ||
+  if (addr->sa_family != AF_INET ||
+      addrlen != sizeof(struct sockaddr_in) ||
       !geteuid() || ((struct sockaddr_in*)addr)->sin_port == 0 ||
-      ntohs(((struct sockaddr_in*)addr)->sin_port) >= IPPORT_RESERVED/2)
-    return old_bind(fd,addr,addrlen);
+      ntohs(((struct sockaddr_in*)addr)->sin_port) >= IPPORT_RESERVED/2) {
+    return old_bind(fd, addr, addrlen);
+  }
 
   sigfillset(&block);
   for (evilsignal=evilsignals;
        *evilsignal;
        evilsignal++)
     sigdelset(&block,*evilsignal);
-  if (sigprocmask(SIG_BLOCK,&block,&saved)) return -1;
+
+  if (sigprocmask(SIG_BLOCK, &block, &saved)) {
+    fprintf(stderr, "libauthbind: bind: error blocking sigmask: %s\n", strerror(errno));
+    return -1;
+  }
   
   sprintf(addrarg,"%08lx",
 	  ((unsigned long)(((struct sockaddr_in*)addr)->sin_addr.s_addr))&0x0ffffffffUL);
   sprintf(portarg,"%04x",
 	  ((unsigned int)(((struct sockaddr_in*)addr)->sin_port))&0x0ffff);
 
-  child= fork(); if (child==-1) goto x_err;
+  child = fork();
+  if (child == -1) {
+    fprintf(stderr, "libauthbind: bind: fork() error: %s\n", strerror(errno));
+    goto x_err;
+  }
 
-  if (!child) {
+  if (child == 0) {
     if (dup2(fd,0)) exiterrno(errno);
     removepreload();
-    execl(HELPER,HELPER,addrarg,portarg,(char*)0);
-    status= errno > 0 && errno < 127 ? errno : 127;
+
+    execl(HELPER, HELPER, addrarg, portarg, NULL);
+    status = errno > 0 && errno < 127 ? errno : 127;
+
     STDERRSTR_CONST("libauthbind: possible installation problem - "
 		    "could not invoke " HELPER " (");
     STDERRSTR_STRING(rcsid);
     STDERRSTR_CONST(")\n");
+
     exiterrno(status);
   }
 
-  rchild= waitpid(child,&status,0);
-  if (rchild==-1) goto x_err;
-  if (rchild!=child) { errno= ECHILD; goto x_err; }
+  rchild = waitpid(child, &status, 0);
+  if (rchild == -1) {
+    fprintf(stderr, "libauthbind: bind: waitpid() error on PID %lu: %s\n",
+      (unsigned long) child, strerror(errno));
+    goto x_err;
+  }
+
+  if (rchild != child) {
+    /* This should really never happen. */
+    fprintf(stderr, "libauthbind: bind: waitpid() returned PID %lu, and we wanted PID %lu\n", (unsigned long) rchild, (unsigned long) child);
+    errno = ECHILD;
+    goto x_err;
+  }
 
   if (WIFEXITED(status)) {
     if (WEXITSTATUS(status)) {
@@ -194,6 +246,7 @@
     }
     r= 0;
     goto x;
+
   } else {
     errno= ENOSYS;
     goto x_err;
@@ -202,6 +255,9 @@
 x_err:
   r= -1;
 x:
-  if (sigprocmask(SIG_SETMASK,&saved,0)) abort();
+  if (sigprocmask(SIG_SETMASK,&saved,0)) {
+    abort();
+  }
+
   return r;
 }
